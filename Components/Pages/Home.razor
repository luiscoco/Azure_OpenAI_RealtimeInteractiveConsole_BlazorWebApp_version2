@page "/"
@rendermode InteractiveServer
@using OpenAI.RealtimeConversation
@inject RealtimeConversationClient client

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<button class="btn btn-primary" @onclick="StartConversation">Click me</button>

<textarea readonly style="width: 100%; height: 300px;" value="@DisplayMessages"></textarea>

@code {

    #pragma warning disable OPENAI002
    private List<string> messages = new();

    // Property to display messages in the text area
    private string DisplayMessages => string.Join("\n", messages);

    private async Task StartConversation()
    {
        try
        {
            LogMessage("Starting conversation...");

            // Start the conversation session
            using RealtimeConversationSession session = await client.StartConversationSessionAsync();

            // Define the finishConversationTool
            ConversationFunctionTool finishConversationTool = new()
                {
                    Name = "user_wants_to_finish_conversation",
                    Description = "Invoked when the user says goodbye, expresses being finished, or otherwise seems to want to stop the interaction.",
                    Parameters = BinaryData.FromString("{}")
                };

            // Configure the session
            await session.ConfigureSessionAsync(new ConversationSessionOptions()
                {
                    Tools = { finishConversationTool },
                    InputTranscriptionOptions = new()
                    {
                        Model = "whisper-1",
                    },
                });

            // Initialize speaker output
            SpeakerOutput speakerOutput = new();

            // Process session updates
            await foreach (ConversationUpdate update in session.ReceiveUpdatesAsync())
            {
                if (update is ConversationSessionStartedUpdate)
                {
                    LogMessage("Connected: session started");

                    // Start capturing microphone input
                    _ = Task.Run(async () =>
                    {
                        using MicrophoneAudioStream microphoneInput = MicrophoneAudioStream.Start();
                        LogMessage("Listening to microphone input...");
                        LogMessage("(Just tell the app you're done to finish)");
                        await session.SendInputAudioAsync(microphoneInput);
                    });
                }

                if (update is ConversationInputSpeechStartedUpdate speechStartedUpdate)
                {
                    LogMessage($"Start of speech detected @ {speechStartedUpdate.AudioStartTime}");
                    speakerOutput.ClearPlayback();
                }

                if (update is ConversationInputSpeechFinishedUpdate speechFinishedUpdate)
                {
                    LogMessage($"End of speech detected @ {speechFinishedUpdate.AudioEndTime}");
                }

                if (update is ConversationInputTranscriptionFinishedUpdate transcriptionFinishedUpdate)
                {
                    LogMessage($"USER: {transcriptionFinishedUpdate.Transcript}");
                }

                if (update is ConversationItemStreamingPartDeltaUpdate deltaUpdate)
                {
                    if (deltaUpdate.AudioBytes == null || deltaUpdate.AudioBytes.ToArray().Length == 0)
                    {
                        // Handle empty audio bytes
                    }
                    else
                    {
                        speakerOutput.EnqueueForPlayback(deltaUpdate.AudioBytes);
                    }
                    LogMessage(deltaUpdate.AudioTranscript + deltaUpdate.Text);
                }

                if (update is ConversationItemStreamingFinishedUpdate itemFinishedUpdate)
                {
                    LogMessage("Response completed.");
                    if (itemFinishedUpdate.FunctionName == finishConversationTool.Name)
                    {
                        LogMessage("Finish tool invoked -- ending conversation!");
                        break;
                    }
                }

                if (update is ConversationErrorUpdate errorUpdate)
                {
                    LogMessage($"ERROR: {errorUpdate.Message}");
                    LogMessage(errorUpdate.GetRawContent().ToString());
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            LogMessage($"Error: {ex.Message}");
        }
    }

    private void LogMessage(string message)
    {
        messages.Add(message);
        StateHasChanged(); // Update the UI to reflect the new messages
    }
}
